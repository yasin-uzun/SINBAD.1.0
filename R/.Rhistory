res = gtable_add_grob(res, elem, t = 3, l = 3, clip = "off",
name = "col_annotation")
if (annotation_names_col) {
elem = pheatmap:::draw_annotation_names(annotation_col, fontsize,
horizontal = T)
res = gtable_add_grob(res, elem, t = 3, l = 4, clip = "off",
name = "col_annotation_names")
}
}
if (!pheatmap:::is.na2(annotation_row)) {
converted_annotation = convert_annotations(annotation_row,
annotation_colors)
elem = pheatmap:::draw_annotations(converted_annotation, border_color,
gaps_row, fontsize, horizontal = F)
res = gtable_add_grob(res, elem, t = 4, l = 2, clip = "off",
name = "row_annotation")
if (annotation_names_row) {
elem = pheatmap:::draw_annotation_names(annotation_row, fontsize,
horizontal = F, hjust_col = hjust_col, vjust_col = vjust_col,
angle_col = angle_col)
res = gtable_add_grob(res, elem, t = 5, l = 2, clip = "off",
name = "row_annotation_names")
}
}
annotation = c(annotation_col[length(annotation_col):1],
annotation_row[length(annotation_row):1])
annotation = annotation[unlist(lapply(annotation, function(x) !pheatmap:::is.na2(x)))]
if (length(annotation) > 0 & annotation_legend) {
elem = pheatmap:::draw_annotation_legend(annotation, annotation_colors,
border_color, fontsize = fontsize, ...)
t = ifelse(is.null(labels_row), 4, 3)
res = gtable_add_grob(res, elem, t = t, l = 6, b = 5,
clip = "off", name = "annotation_legend")
}
if (!pheatmap:::is.na2(legend)) {
elem = pheatmap:::draw_legend(color, breaks, legend, fontsize = fontsize,
...)
t = ifelse(is.null(labels_row), 4, 3)
res = gtable_add_grob(res, elem, t = t, l = 5, b = 5,
clip = "off", name = "legend")
}
return(res)
}
# Modified pheatmap:::lo
lo <- function (rown, coln, nrow, ncol, cellheight = NA, cellwidth = NA,
treeheight_col, treeheight_row, legend, annotation_row, annotation_col,
annotation_colors, annotation_legend, annotation_names_row,
annotation_names_col, main, fontsize, fontsize_row, fontsize_col,
angle_col, gaps_row, gaps_col, ...)
{
if (!is.null(coln[1]) | (!pheatmap:::is.na2(annotation_row) & annotation_names_row)) {
if (!is.null(coln[1])) {
t = coln
}
else {
t = ""
}
tw = strwidth(t, units = "in", cex = fontsize_col/fontsize)
if (annotation_names_row) {
t = c(t, colnames(annotation_row))
tw = c(tw, strwidth(colnames(annotation_row), units = "in"))
}
longest_coln = which.max(tw)
gp = list(fontsize = ifelse(longest_coln <= length(coln),
fontsize_col, fontsize), ...)
coln_height = unit(1, "grobheight", textGrob(t[longest_coln],
rot = angle_col, gp = do.call(gpar, gp))) + unit(10,
"bigpts")
}
else {
coln_height = unit(5, "bigpts")
}
if (!is.null(rown[1])) {
t = rown
tw = strwidth(t, units = "in", cex = fontsize_row/fontsize)
if (annotation_names_col) {
t = c(t, colnames(annotation_col))
tw = c(tw, strwidth(colnames(annotation_col), units = "in"))
}
longest_rown = which.max(tw)
gp = list(fontsize = ifelse(longest_rown <= length(rown),
fontsize_row, fontsize), ...)
rown_width = unit(1, "grobwidth", textGrob(t[longest_rown],
rot = 0, gp = do.call(gpar, gp))) + unit(10, "bigpts")
}
else {
rown_width = unit(5, "bigpts")
}
gp = list(fontsize = fontsize, ...)
if (!pheatmap:::is.na2(legend)) {
longest_break = which.max(nchar(names(legend)))
longest_break = unit(1.1, "grobwidth",
textGrob(as.character(names(legend))[longest_break],
gp = do.call(gpar, gp)))
title_length = unit(1.1, "grobwidth", textGrob("Scale",
gp = gpar(fontface = "bold", ...)))
legend_width = unit(12, "bigpts") + longest_break * 1.2
legend_width = max(title_length, legend_width)
}
else {
legend_width = unit(0, "bigpts")
}
if (is.na(main)) {
main_height = unit(0, "npc")
}
else {
main_height = unit(1.5, "grobheight", textGrob(main,
gp = gpar(fontsize = 1.3 * fontsize, ...)))
}
textheight = unit(fontsize, "bigpts")
if (!pheatmap:::is.na2(annotation_col)) {
annot_col_height = ncol(annotation_col) * (textheight +
unit(2, "bigpts")) + unit(2, "bigpts")
t = c(as.vector(as.matrix(annotation_col)), colnames(annotation_col))
annot_col_legend_width = unit(1.2, "grobwidth", textGrob(t[which.max(nchar(t))],
gp = gpar(...))) + unit(12, "bigpts")
if (!annotation_legend) {
annot_col_legend_width = unit(0, "npc")
}
}
else {
annot_col_height = unit(0, "bigpts")
annot_col_legend_width = unit(0, "bigpts")
}
if (!pheatmap:::is.na2(annotation_row)) {
annot_row_width = ncol(annotation_row) * (textheight +
unit(2, "bigpts")) + unit(2, "bigpts")
t = c(as.vector(as.matrix(annotation_row)), colnames(annotation_row))
annot_row_legend_width = unit(1.2, "grobwidth", textGrob(t[which.max(nchar(t))],
gp = gpar(...))) + unit(12, "bigpts")
if (!annotation_legend) {
annot_row_legend_width = unit(0, "npc")
}
}
else {
annot_row_width = unit(0, "bigpts")
annot_row_legend_width = unit(0, "bigpts")
}
annot_legend_width = max(annot_row_legend_width, annot_col_legend_width)
treeheight_col = unit(treeheight_col, "bigpts") + unit(5,
"bigpts")
treeheight_row = unit(treeheight_row, "bigpts") + unit(5,
"bigpts")
if (is.na(cellwidth)) {
mat_width = unit(1, "npc") - rown_width - legend_width -
treeheight_row - annot_row_width - annot_legend_width
}
else {
mat_width = unit(cellwidth * ncol, "bigpts") + length(gaps_col) *
unit(4, "bigpts")
}
if (is.na(cellheight)) {
mat_height = unit(1, "npc") - main_height - coln_height -
treeheight_col - annot_col_height
}
else {
mat_height = unit(cellheight * nrow, "bigpts") + length(gaps_row) *
unit(4, "bigpts")
}
gt = gtable(widths = unit.c(treeheight_row, rown_width,
mat_width, treeheight_row, legend_width, annot_legend_width),
heights = unit.c(main_height, treeheight_col, annot_col_height,
mat_height, coln_height), vp = viewport(gp = do.call(gpar,
gp)))
cw = convertWidth(mat_width - (length(gaps_col) * unit(4,
"bigpts")), "bigpts", valueOnly = T)/ncol
ch = convertHeight(mat_height - (length(gaps_row) * unit(4,
"bigpts")), "bigpts", valueOnly = T)/nrow
mindim = min(cw, ch)
res = list(gt = gt, mindim = mindim)
return(res)
}
# Modified pheatmap:::draw_rownames
draw_rownames <- function (rown, gaps, ...)
{
coord = pheatmap:::find_coordinates(length(rown), gaps)
y = unit(1, "npc") - (coord$coord - 0.5 * coord$size)
res = textGrob(rown, x = unit(-3, "bigpts"), y = y, vjust = 0.5,
hjust = 1, gp = gpar(...))
return(res)
}
assignInNamespace(x="draw_rownames", value=draw_rownames, ns="pheatmap")
assignInNamespace(x="lo", value=lo, ns="pheatmap")
assignInNamespace(x="heatmap_motor", value=heatmap_motor, ns="pheatmap")
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = paste("Prediction Correlation")
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
cor_mat = as.matrix(cor_tab) + diag(nrow(cor_tab)) * 0.5
#Jaccard heatmap
par(mar = c(4, 4, 14 , 4))
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = paste("Prediction Correlation")
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
model_name = 'RF'
cor_file = paste0('/home/uzuny/uzuny/projects/public_met/cross_comp/data/cor_',model_name,'.txt')
cor_tab = read.table(cor_file, header = T)
rownames(cor_tab) = cor_tab$Training_Model
cor_tab$Training_Model = NULL
cor_mat = as.matrix(cor_tab) + diag(nrow(cor_tab)) * 0.5
#Jaccard heatmap
par(mar = c(4, 4, 14 , 4))
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = model_name
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
cor_mat
model_name = 'RF'
cor_file = paste0('/home/uzuny/uzuny/projects/public_met/cross_comp/data/cor_',model_name,'.txt')
cor_tab = read.table(cor_file, header = T)
rownames(cor_tab) = cor_tab$Training_Model
cor_tab$Training_Model = NULL
cor_mat = as.matrix(cor_tab) + diag(nrow(cor_tab)) * 0.5
#Jaccard heatmap
par(mar = c(4, 4, 14 , 4))
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = model_name
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
#Jaccard heatmap
par(mar = c(4, 4, 4 , 4))
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = model_name
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
model_name = 'CNN'
cor_file = paste0('/home/uzuny/uzuny/projects/public_met/cross_comp/data/cor_',model_name,'.txt')
cor_tab = read.table(cor_file, header = T)
rownames(cor_tab) = cor_tab$Training_Model
cor_tab$Training_Model = NULL
cor_mat = as.matrix(cor_tab) + diag(nrow(cor_tab)) * 0.5
#Jaccard heatmap
par(mar = c(4, 4, 4 , 4))
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = model_name
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
#
# library(RColorBrewer)
#
# x = t(cor_mat)
# image( x, xaxt= "n", yaxt= "n", col=colorRampPalette(brewer.pal(11,"RdYlBu"))(22))
# axis( 4, at=seq(0,1,length.out=ncol( x ) ), labels= colnames( x ), las= 1, tick=FALSE)
#
#
#
#
# library(gplots)
# heatmap.2(cor_mat)
model_name = 'Elastic'
cor_file = paste0('/home/uzuny/uzuny/projects/public_met/cross_comp/data/cor_',model_name,'.txt')
cor_tab = read.table(cor_file, header = T)
rownames(cor_tab) = cor_tab$Training_Model
cor_tab$Training_Model = NULL
cor_mat = as.matrix(cor_tab) + diag(nrow(cor_tab)) * 0.5
#Jaccard heatmap
par(mar = c(4, 4, 4 , 4))
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = model_name
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
#
# library(RColorBrewer)
#
# x = t(cor_mat)
# image( x, xaxt= "n", yaxt= "n", col=colorRampPalette(brewer.pal(11,"RdYlBu"))(22))
# axis( 4, at=seq(0,1,length.out=ncol( x ) ), labels= colnames( x ), las= 1, tick=FALSE)
#
#
#
#
# library(gplots)
# heatmap.2(cor_mat)
model_name = 'Mean'
cor_file = paste0('/home/uzuny/uzuny/projects/public_met/cross_comp/data/cor_',model_name,'.txt')
cor_tab = read.table(cor_file, header = T)
rownames(cor_tab) = cor_tab$Training_Model
cor_tab$Training_Model = NULL
cor_mat = as.matrix(cor_tab) + diag(nrow(cor_tab)) * 0.5
cor_tab
cor_mat = as.matrix(cor_tab) + diag(nrow(cor_tab)) * 0.5
cor_mat = as.matrix(cor_tab)
#Jaccard heatmap
par(mar = c(4, 4, 4 , 4))
ph <- pheatmap(
mat               = cor_mat,
show_colnames     = TRUE,
show_rownames     = TRUE,
cellheight=50, cellwidth=50
#, legend_breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1, 1.1 )
#, legend_labels = c("0", "0.2", "0.4", "0.6", "0.8", "1", "JI")
, main              = model_name
, drop_levels       = TRUE
, cluster_rows = F
, cluster_cols = F
)
plot(rnorm(100), main="Hey Some Data")
library(colorspace)
n <- 20
palette <- qualitative_hcl(n)
diverge_hcl(n)
palette <- rainbow_hcl(n, c = 60, l = 75)
pie(rep(1, n), col=palette)
palette <- palette(rainbow(n))
pie(rep(1, n), col=palette)
colors37 = c("#466791","#60bf37","#953ada","#4fbe6c","#ce49d3","#a7b43d","#5a51dc","#d49f36","#552095","#507f2d","#db37aa","#84b67c","#a06fda","#df462a","#5b83db","#c76c2d","#4f49a3","#82702d","#dd6bbb","#334c22","#d83979","#55baad","#dc4555","#62aad3","#8c3025","#417d61","#862977","#bba672","#403367","#da8a6d","#a79cd4","#71482c","#c689d0","#6b2940","#d593a7","#895c8b","#bd5975")
pie(rep(1, 37), col=colors37)
brbg <- rev(RColorBrewer::brewer.pal(11, "BrBG"))
pal(brbg)
brbg <- rev(RColorBrewer::brewer.pal(11, "BrBG"))
pal <- function(col, border = "transparent") {
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "")
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(brbg)
brbg <- rev(RColorBrewer::brewer.pal(11, "BrBG"))
brbg_hcl <- colorspace::diverging_hcl(11,
h = c(180, 50), c = 80, l = c(20, 95), power = c(0.7, 1.3))
pal <- function(col, border = "transparent") {
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "")
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(brbg)
pal(brbg_hcl)
brbg_hcl <- colorspace::diverging_hcl(1,
h = c(180, 50), c = 80, l = c(20, 95), power = c(0.7, 1.3))
pal <- function(col, border = "transparent") {
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "")
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
pal(brbg)
pal(brbg_hcl)
brbg_hcl <- colorspace::diverging_hcl(2,
h = c(180, 50), c = 80, l = c(20, 95), power = c(0.7, 1.3))
pal(brbg)
pal(brbg_hcl)
viridis <- viridis::viridis(11)
viridis_hcl <- colorspace::sequential_hcl(11,
h = c(300, 75), c = c(35, 95), l = c(15, 90), power = c(0.8, 1.2))
plasma <- viridis::plasma(11)
plasma_hcl <- colorspace::sequential_hcl(11,
h = c(-100, 100), c = c(60, 100), l = c(15, 95), power = c(2, 0.9))
pal <- function(col, border = "transparent") {
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "")
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
par(mar = rep(0, 4), mfrow = c(4, 2))
pal(coolwarm)
pal(viridis)
pal(viridis_hcl)
??viridis
library(scico)
library(ggplot)
library(ggplot2)
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(size=4, aes(colour = factor(cyl))) +
scale_color_viridis(discrete=TRUE) +
theme_bw()
library(viridis)
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(size=4, aes(colour = factor(cyl))) +
scale_color_viridis(discrete=TRUE) +
theme_bw()
cyl
head(mtcars$cyl)
unique(mtcars$cyl)
library(ggplot2)
bp <- ggplot(data=PlantGrowth, aes(x=group, y=weight, fill=group)) + geom_boxplot()
bp
bp + scale_fill_discrete(name="Experimental\nCondition")
(name="Experimental\nCondition")
bp + scale_fill_continuous(name="Experimental\nCondition")
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(size=4, aes(colour = factor(cyl))) +
scale_color_viridis(discrete=TRUE) +
theme_bw()
p + geom_point(size=4, aes(colour = factor(cyl))) +
scale_color_viridis(discrete=TRUE) +
theme_bw()+ scale_fill_discrete(name="Experimental\nCondition")
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(size=4, aes(colour = factor(cyl))) +
scale_color_viridis(discrete=TRU) +
theme_bw()+ scale_fill_discrete(name="CYLINDER")
p + geom_point(size=4, aes(colour = factor(cyl))) +
scale_color_viridis(discrete=TRU) +
#theme_bw()+
scale_fill_discrete(name="CYLINDER")
p + geom_point(size=4, aes(colour = factor(cyl))) +
scale_color_viridis(discrete=TRUE) +
#theme_bw()+
scale_fill_discrete(name="CYLINDER")
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_point(size=4, aes(colour = factor(cyl), name = 'x')) +
scale_color_viridis(discrete=TRUE) +
#theme_bw()+
scale_fill_discrete(name="CYLINDER")
p + geom_point(size=4, aes(colour = factor(cyl))) +
#scale_color_viridis(discrete=TRUE) +
#theme_bw()+
scale_fill_discrete(name="CYLINDER")
data(iris)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(aes(shape=Species, colour=Petal.Width)) +
scale_colour_gradient() +
labs(shape="Species label", colour="Petal width label")
#You specify the labels using labs(), with each scale separately specified, i.e.
labs(shape="Species label", colour="Petal width label")
bp<-ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_boxplot()
bp
# Scatter plot
sp<-ggplot(mtcars, aes(x=wt, y=mpg, color=cyl)) + geom_point()
sp
x1 = runif(100)
x2 = rnorm(100)
x1 = runif(100)
x2 = rnorm(100)
ggplot(mtcars, aes(x = x1, y = x2) ) + geom_point()
length(x1)
length(x2)
x1 = runif(100)
x2 = rnorm(100)
data = cbind(x1, x2)
ggplot(data, aes(x = x1, y = x2) ) + geom_point()
head(daa)
head(data)
ggplot(data, aes(x = x1, y = x2) ) + geom_point()
data = data.frame(x1, x2)
ggplot(data, aes(x = x1, y = x2) ) + geom_point()
x1 = runif(1000)
x2 = rnorm(1000)
data = data.frame(x1, x2)
ggplot(data, aes(x = x1, y = x2) ) + geom_point()
x1 = runif(10000)
x2 = rnorm(10000)
data = data.frame(x1, x2)
ggplot(data, aes(x = x1, y = x2) ) + geom_point()
t.test(c1, c2)
c1 = c(5, 10, 15)
c2 = c(50, 100, 150)
t.test(c1, c2)
c1 = c(5, 10, 15, 20)
c2 = c(50, 100, 150, 200)
t.test(c1, c2)
setwd("~/uzuny/projects/jamboree/package/p100/MethylProc/R")
tapply
??tapply
